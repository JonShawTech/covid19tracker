{"version":3,"sources":["components/FetchData.js","App.js","serviceWorker.js","index.js"],"names":["FetchData","state","chooseState","stateData","countryData","worldData","handleChange","event","setState","target","value","getStates","this","getWorldData","getUSA","requestOptions","method","redirect","fetch","then","response","json","data","i","length","x","toString","replace","nf","Intl","NumberFormat","date","Date","getMonth","getDate","getFullYear","usaStateData","name","Cases","cases","Deaths","deaths","todayDeaths","todayCases","usaData","world_data","Recovered","recovered","affectedCountries","active","worldDeathRatio","usaDeathRatio","stateDeathRatio","className","format","toFixed","width","height","barSize","strokeDasharray","dataKey","fill","onChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a0b284dd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend,\r\n  CartesianGrid,\r\n \r\n} from \"recharts\";\r\n\r\nexport default class FetchData extends React.Component {\r\n  state = {\r\n    chooseState: \"Georgia\",\r\n    stateData: [],\r\n    countryData: \"\",\r\n    worldData: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getWorldData();\r\n    this.getUSA();\r\n    this.getStates();\r\n  }\r\n\r\n  async getWorldData() {\r\n    var requestOptions = {\r\n      method: \"GET\",\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    await fetch(\"https://corona.lmao.ninja/v2/all\", requestOptions)\r\n      .then((response) => response.json())\r\n      .then((json) => this.setState({ worldData: json }));\r\n  }\r\n\r\n  async getStates() {\r\n    var requestOptions = {\r\n      method: \"GET\",\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    const response = await fetch(\r\n      \"https://corona.lmao.ninja/v2/states\",\r\n      requestOptions\r\n    );\r\n\r\n    const data = await response.json();\r\n\r\n    this.state.stateData = [];\r\n    for (let i = 0; i < data.length; i++) {\r\n      if (this.state.chooseState == data[i].state) {\r\n        this.setState({ stateData: data[i] });\r\n      }\r\n    }\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ chooseState: event.target.value });\r\n    this.getStates();\r\n  };\r\n\r\n  async numberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  }\r\n\r\n  async getUSA() {\r\n    var requestOptions = {\r\n      method: \"GET\",\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    const response = await fetch(\r\n      \"https://corona.lmao.ninja/v2/countries/USA\",\r\n      requestOptions\r\n    )\r\n      .then((response) => response.json())\r\n      .then((json) => this.setState({ countryData: json }));\r\n  }\r\n\r\n  render() {\r\n    var nf = new Intl.NumberFormat();\r\n\r\n    var date =\r\n      new Date().getMonth() +\r\n      1 +\r\n      \"/\" +\r\n      new Date().getDate() +\r\n      \"/\" +\r\n      new Date().getFullYear();\r\n    const usaStateData = [\r\n      {\r\n        name: this.state.stateData.state,\r\n        Cases: this.state.stateData.cases,\r\n        Deaths: this.state.stateData.deaths,\r\n        \"Deaths Today\": this.state.stateData.todayDeaths,\r\n        \"Cases Today\": this.state.stateData.todayCases,\r\n      },\r\n    ];\r\n\r\n    const usaData = [\r\n      {\r\n        name: \"United States\",\r\n        Cases: this.state.countryData.cases,\r\n        Deaths: this.state.countryData.deaths,\r\n        \"Deaths Today\": this.state.countryData.todayDeaths,\r\n        \"Cases Today\": this.state.countryData.todayCases,\r\n      },\r\n    ];\r\n\r\n    const world_data = [\r\n      {\r\n        name: \"World Wide\",\r\n        Cases: this.state.worldData.cases,\r\n        Deaths: this.state.worldData.deaths,\r\n        Recovered: this.state.worldData.recovered,\r\n        \"Affected Countries\": this.state.worldData.affectedCountries,\r\n        \"Active Cases\": this.state.worldData.active,\r\n      },\r\n    ];\r\n\r\n    var worldDeathRatio =\r\n      (this.state.worldData.deaths / this.state.worldData.cases) * 100;\r\n    var usaDeathRatio =\r\n      (this.state.countryData.deaths / this.state.countryData.cases) * 100;\r\n    var stateDeathRatio =\r\n      (this.state.stateData.deaths / this.state.stateData.cases) * 100;\r\n\r\n  \r\n    return (\r\n      <div className=\"main\">\r\n        <h1 className=\"c1\">Coronavirus Cases</h1>\r\n        <div className=\"c2\">\r\n          <h3 className=\"c2\">{date}</h3>\r\n\r\n          {/* WORLD DATA */}\r\n\r\n          <h2> World Wide </h2>\r\n\r\n          <h3 className=\"blue\">\r\n            Cases: {nf.format(this.state.worldData.cases)}\r\n          </h3>\r\n          <h3 className=\"purple\">\r\n            Active cases: {nf.format(this.state.worldData.active)}\r\n          </h3>\r\n          <h3 className=\"red\">\r\n            Deaths: {nf.format(this.state.worldData.deaths)}{\" \"}\r\n            {\"(\" + worldDeathRatio.toFixed(2) + \"%)\"}\r\n          </h3>\r\n          <h3 className=\"green\">\r\n            Recovered: {nf.format(this.state.worldData.recovered)}\r\n          </h3>\r\n          <h3 className=\"teal\">\r\n            Affected Countries:{\" \"}\r\n            {nf.format(this.state.worldData.affectedCountries)}\r\n          </h3>\r\n        </div>\r\n\r\n        <div className=\"chart-container\">\r\n    \r\n          <BarChart width={500} height={250} data={world_data} barSize={35}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"name\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Legend />\r\n\r\n            <Bar dataKey=\"Cases\" fill=\"rgb(13, 49, 209)\" />\r\n            <Bar dataKey=\"Active Cases\" fill=\"rgb(122, 120, 241)\" />\r\n            <Bar dataKey=\"Deaths\" fill=\"#FF0000\" />\r\n            <Bar dataKey=\"Recovered\" fill=\"rgb(0, 187, 72)\" />\r\n            <Bar dataKey=\"Affected Countries\" fill=\"rgb(69, 227, 255)\" />\r\n          </BarChart>\r\n         \r\n        </div>\r\n\r\n        {/* USA DATA */}\r\n        <div className=\"c2\">\r\n          <h2> United States </h2>\r\n          <h3 className=\"blue\">\r\n            Cases: {nf.format(this.state.countryData.cases)}\r\n          </h3>\r\n\r\n          <h3 className=\"red\">\r\n            Deaths: {nf.format(this.state.countryData.deaths)}{\" \"}\r\n            {\"(\" + usaDeathRatio.toFixed(2) + \"%)\"}{\" \"}\r\n          </h3>\r\n        </div>\r\n\r\n        <div className=\"c1\">\r\n          <BarChart width={500} height={250} data={usaData} barSize={35}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"name\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Legend />\r\n\r\n            <Bar dataKey=\"Cases\" fill=\"rgb(13, 49, 209)\" />\r\n            <Bar dataKey=\"Deaths\" fill=\"#FF0000\" />\r\n            <Bar dataKey=\"Cases Today\" fill=\"#8884d8\" />\r\n            <Bar dataKey=\"Deaths Today\" fill=\"#82ca9d\" />\r\n          </BarChart>\r\n        </div>\r\n\r\n        {/* STATE DATA */}\r\n        <div className=\"c2\">\r\n          <h3>Choose State</h3>\r\n          <select value={this.state.chooseState} onChange={this.handleChange}>\r\n            <option value=\"\">Choose a state</option>\r\n            <option value=\"Alabama\">Alabama</option>\r\n            <option value=\"Alaska\">Alaska</option>\r\n            <option value=\"Arizona\">Arizona</option>\r\n            <option value=\"Arkansas\">Arkansas</option>\r\n            <option value=\"California\">California</option>\r\n            <option value=\"Colorado\">Colorado</option>\r\n            <option value=\"Connecticut\">Connecticut</option>\r\n            <option value=\"Delaware\">Delaware</option>\r\n            <option value=\"District Of Columbia\">District of Columbia</option>\r\n            <option value=\"Florida\">Florida</option>\r\n            <option value=\"Georgia\">Georgia</option>\r\n            <option value=\"Hawaii\">Hawaii</option>\r\n            <option value=\"Idaho\">Idaho</option>\r\n            <option value=\"Illinois\">Illinois</option>\r\n            <option value=\"Indiana\">Indiana</option>\r\n            <option value=\"Iowa\">Iowa</option>\r\n            <option value=\"Kansas\">Kansas</option>\r\n            <option value=\"Kentucky\">Kentucky</option>\r\n            <option value=\"Louisiana\">Louisiana</option>\r\n            <option value=\"Maine\">Maine</option>\r\n            <option value=\"Maryland\">Maryland</option>\r\n            <option value=\"Massachusetts\">Massachusetts</option>\r\n            <option value=\"Michigan\">Michigan</option>\r\n            <option value=\"Minnisota\">Minnesota</option>\r\n            <option value=\"Mississippi\">Mississippi</option>\r\n            <option value=\"Missouri\">Missouri</option>\r\n            <option value=\"Montana\">Montana</option>\r\n            <option value=\"Nebraska\">Nebraska</option>\r\n            <option value=\"Nevada\">Nevada</option>\r\n            <option value=\"New Hampshire\">New Hampshire</option>\r\n            <option value=\"New Jersey\">New Jersey</option>\r\n            <option value=\"New Mexico\">New Mexico</option>\r\n            <option value=\"New York\">New York</option>\r\n            <option value=\"North Carolina\">North Carolina</option>\r\n            <option value=\"North Dakota\">North Dakota</option>\r\n            <option value=\"Ohio\">Ohio</option>\r\n            <option value=\"Oklahoma\">Oklahoma</option>\r\n            <option value=\"Oregon\">Oregon</option>\r\n            <option value=\"Pennsylvania\">Pennsylvania</option>\r\n            <option value=\"Rhode Island\">Rhode Island</option>\r\n            <option value=\"South Carolina\">South Carolina</option>\r\n            <option value=\"South Dakota\">South Dakota</option>\r\n            <option value=\"Tennessee\">Tennessee</option>\r\n            <option value=\"Texas\">Texas</option>\r\n            <option value=\"Utah\">Utah</option>\r\n            <option value=\"Vermont\">Vermont</option>\r\n            <option value=\"Virginia\">Virginia</option>\r\n            <option value=\"Washington\">Washington</option>\r\n            <option value=\"West Virginia\">West Virginia</option>\r\n            <option value=\"Wisconsin\">Wisconsin</option>\r\n            <option value=\"Wyoming\">Wyoming</option>\r\n          </select>\r\n          <h2> {this.state.stateData.state}</h2>\r\n\r\n          <h3 className=\"blue\">\r\n            Cases: {nf.format(this.state.stateData.cases)}\r\n          </h3>\r\n\r\n          <h3 className=\"red\">\r\n            Deaths: {nf.format(this.state.stateData.deaths)}{\" \"}\r\n            {\"(\" + stateDeathRatio.toFixed(2) + \"%)\"}\r\n          </h3>\r\n        </div>\r\n\r\n        <div className=\"c1\">\r\n          <BarChart width={500} height={250} data={usaStateData} barSize={35}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"name\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Legend />\r\n\r\n            <Bar dataKey=\"Cases\" fill=\"rgb(13, 49, 209)\" />\r\n            <Bar dataKey=\"Deaths\" fill=\"#FF0000\" />\r\n            <Bar dataKey=\"Cases Today\" fill=\"#8884d8\" />\r\n            <Bar dataKey=\"Deaths Today\" fill=\"#82ca9d\" />\r\n          </BarChart>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\n\nimport './App.css';\nimport './components/FetchData';\nimport FetchData from './components/FetchData';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n      <FetchData></FetchData>\n      \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}